#!/usr/bin/env python3
"""This is the command line interface for Utopia"""

import sys
import argparse
import warnings

import utopya

# -----------------------------------------------------------------------------
if __name__ == '__main__':
    # Define the CLI
    parser = argparse.ArgumentParser(description='Perform a Utopia run.',
                                     epilog="And that's how you use utopia.")
    parser.add_argument('model_name',
                        help="The name of the model to run")
    parser.add_argument('run_cfg_path',
                        default=None, nargs='?',
                        help="The path to the run configuration. Needs to be "
                             "given unless --no-run-cfg is also set.")
    parser.add_argument('-s', '--single',
                        default=None, action='store_true',
                        help="If given, forces a single simulation.")
    parser.add_argument('-p', '--sweep',
                        default=None, action='store_true',
                        help="If given, forces a parameter sweep. Is ignored, "
                             "if the --single argument was also given.")
    parser.add_argument('--note',
                        default=None, nargs='?',
                        help="Overwrites the `paths->model_note` entry which "
                             "is used in creation of the run directory path.")
    parser.add_argument('-d', '--debug',
                        default=0, action='count',
                        help="Run the Multiverse in debug mode. This will "
                             "lead to the run being aborted if a single "
                             "simulation exits with a non-zero exit code.")

    # CLI defined. Parse the arguments now.
    args = parser.parse_args()

    # Set an empty update dict. It will hold adjustments to the given configs
    update_dict = {}

    # If a model_note was given, add it to the paths
    if args.note:
        update_dict['paths'] = dict(model_note=args.note)

    # Set the WorkerManager's non-zero exit handling, if in debug mode
    if args.debug:
        if args.debug == 1:
            update_dict['worker_manager'] = dict(nonzero_exit_handling='warn')
        else:
            update_dict['worker_manager'] = dict(nonzero_exit_handling='raise')

    # Using the args, instantiate a Multiverse object
    mv = utopya.Multiverse(model_name=args.model_name,
                           run_cfg_path=args.run_cfg_path,
                           update_meta_cfg=update_dict)

    if args.single:
        if args.sweep:
            warnings.warn("Received both --single and --sweep arguments; will "
                          "perform a single simulation.",
                          UserWarning)

        mv.run_single()

    elif args.sweep:
        mv.run_sweep()

    else:
        mv.run()
        
