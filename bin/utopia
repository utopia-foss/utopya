#!/usr/bin/env python3
"""This is the command line interface for Utopia"""

import sys
import argparse
import warnings

# Define the CLI
parser = argparse.ArgumentParser(description="Command line access to Utopia.")

# Add sub-parsers to allow sub-commands
subparsers = parser.add_subparsers(dest='mode',
                                   title="commands")
p_run  = subparsers.add_parser('run',
                               help="perform a simulation run")

# subcommand: run .............................................................
p_run.add_argument('model_name',
                   help="Name of the model to run")
p_run.add_argument('run_cfg_path',
                   default=None, nargs='?',
                   help="Path to the run configuration. If not given, the "
                        "default model configuration is used.")

# single or sweep?
p_run.add_argument('-s', '--single',
                   action='store_true',
                   help="If given, forces a single simulation.")
p_run.add_argument('-p', '--sweep',
                   action='store_true',
                   help="If given, forces a parameter sweep. Is ignored, if "
                        "the --single flag was also given.")

# updating meta configuration
p_run.add_argument('--note',
                   default=None, nargs='?',
                   help="Overwrites the `paths->model_note` entry which is "
                        "used in creation of the run directory path.")
p_run.add_argument('--sim-errors',
                   default=None, nargs='?',
                   help="Controls the value of the WorkerManager's "
                        "`nonzero_exit_handling` flag which defines how "
                        "errors in simulations are handled. Allowed values "
                        "are: 'ignore', 'warn', 'raise'. "
                        "If not given, the default from the base config or "
                        "(if set) the user configuration is used.") 
# TODO make possible to set simulation steps here

# subcommand: TODO ............................................................
# ...

# CLI defined. Parse the arguments now.
args = parser.parse_args()


# -----------------------------------------------------------------------------
# If continuing further, need utopya
import utopya


if __name__ == '__main__':
    # Prepare Multiverse ......................................................
    # Set an empty update dict. It will hold adjustments to the given configs
    update_dict = {}

    # If a model_note was given, add it to the paths
    if args.note:
        update_dict['paths'] = dict(model_note=args.note)

    # Set the WorkerManager's non-zero exit handling, if in debug mode
    if args.sim_errors:
        update_dict['worker_manager'] = dict(nonzero_exit_handling=args.sim_errors)

    # Using the args, instantiate a Multiverse object
    mv = utopya.Multiverse(model_name=args.model_name,
                           run_cfg_path=args.run_cfg_path,
                           update_meta_cfg=update_dict)
    
    
    # Perform the run .........................................................
    if args.mode in ['run']:
        if args.single:
            if args.sweep:
                warnings.warn("Received both --single and --sweep command "
                              "line arguments; will perform a single "
                              "simulation.",
                              UserWarning)
                # TODO use utopya-specific warning class

            mv.run_single()

        elif args.sweep:
            mv.run_sweep()

        else:
            mv.run()
            

    # Loading an Utopia run ...................................................
    # TODO


    # Plotting ................................................................
    # TODO
