---
image: python:3.10

stages:
  - check
  - test
  - build
  - deploy
  - post_deploy

# Global pipeline rules
workflow:
  rules:
    # Run pipelines on tags
    - if: $CI_COMMIT_TAG
    # Run pipelines on branches
    - if: $CI_COMMIT_BRANCH


# -- Hidden Jobs --------------------------------------------------------------
# ... to be integrated in other jobs via "extends"

# Add reports
# 1) cobertura coverage report visualization for MRs
#    Includes patch against https://gitlab.com/gitlab-org/gitlab/-/issues/217664,
#    see also: https://forum.gitlab.com/t/enabling-cobertura/36918
# 2) unit test reports, see https://docs.gitlab.com/ee/ci/unit_test_reports.html
.reports:
  variables:
    SRC_DIR: utopya
  after_script:
    - sed -i "s=<source>.*${SRC_DIR}</source>=<source>./${SRC_DIR}</source>=g" coverage.xml
    - sed -i "s;filename=\";filename=\"${SRC_DIR}/;g" coverage.xml
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      cobertura: coverage.xml
      junit: report.xml


# -- Checks -------------------------------------------------------------------

check:hooks:
  stage: check
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files --verbose --show-diff-on-failure



# -- Test Stage ---------------------------------------------------------------
# ... for testing with different python environments

test:py38:
  stage: test
  image: python:3.8
  extends:
    - .reports
  needs: []
  before_script:
    - pip3 install .[dev]
    - cd demo/models/MinimalModel
    - utopya models register MinimalModel --executable MinimalModel.py --source-dir .
    - cd ${CI_PROJECT_DIR}
  script:
    - python tests/run.py -v --cov=utopya --cov-report=term-missing --cov-report=xml --durations=10 --junitxml=report.xml tests/.

test:py39:
  extends: test:py38
  image: python:3.9

test:py310:
  extends: test:py38
  image: python:3.10



# -- Build Stage --------------------------------------------------------------
# ... for building the documentation (and potentially more jobs)

build:docs:
  stage: build
  allow_failure: true
  needs: []
  before_script:
    - pip3 install .[doc]
  script:
    - cd doc
    - make doc
  after_script:
    # Append the error log such that it's more convenient to read
    - echo "-------- Errors emitted during building of documentation --------"
    - cat doc/build_errors.log

  artifacts:
    when: always
    name: "doc-$CI_COMMIT_REF_NAME"
    expire_in: 2 weeks
    expose_as: Documentation Build Results - including error log
    paths:
      - doc/_build/html
      - doc/build_errors.log


# -- Deploy Stage -------------------------------------------------------------

# Deploy utopya to PyPI
deploy:pypi:
  stage: deploy
  rules: &pypi_deploy_rules
    # Run after pushes to tags in original repo, not forks
    - if: $CI_COMMIT_TAG && $CI_PROJECT_PATH == "utopia/utopya"
  script:
    # Define a regex for matching the tag name, see https://regex101.com/r/AsCCJo/2
    # Expects fully-qualified version specifiers, like v1.2.3 or v1.2.3a4
    # Does NOT accept tags like 1.2.3 (missing v) or v1.0 (missing patch version)
    - export VERSION_PATTERN="v([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)([[:lower:]]\d+)?"
    # Before checking that the tag matches the expected pattern, check the regex
    # pattern with a few allowed versions.
    - "[[ \"v1.2.3\" =~ ${VERSION_PATTERN} ]]"
    - "[[ \"v1.23.4a5\" =~ ${VERSION_PATTERN} ]]"

    # Now do the actual check
    - "[[ ${CI_COMMIT_TAG} =~ ${VERSION_PATTERN} ]]"
    # Tag is of the correct form, yay!

    - pip install -U twine

    # Create distribution files
    - python setup.py sdist bdist_wheel

    # Check whether description will render correctly on PyPI
    - twine check dist/*

    # Upload to the TEST PyPI index (using separate credentials)
    - twine upload --repository testpypi -u ${PYPI_TEST_USER} -p ${PYPI_TEST_PASSWORD} dist/*

    # If this worked, continue and upload to actual package index
    - twine upload -u ${PYPI_USER} -p ${PYPI_PASSWORD} dist/*


# -- Test Deploy Stage --------------------------------------------------------
# ... for testing the deployment to the PyPI (and potentially more jobs)

# Install utopya from the PyPI via pip to test automatic deployment
post_deploy:install_from_pypi:
  stage: post_deploy
  rules: *pypi_deploy_rules
  needs:
    - "deploy:pypi"
  script:
    # Install the newly deployed utopya version via PyPI. The current version
    # number is given by the commit tag without the prefixed 'v'.
    - pip install utopya==${CI_COMMIT_TAG#v}
